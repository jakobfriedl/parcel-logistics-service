/*
 * Parcel Logistics Service
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.22.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using FH.ParcelLogistics.Services.Attributes;
using FH.ParcelLogistics.Services.DTOs;
using AutoMapper;
using System.Xml;
using FH.ParcelLogistics.BusinessLogic.Interfaces;
using Microsoft.Extensions.DependencyInjection;

namespace FH.ParcelLogistics.Services.Controllers {
	/// <summary>
	/// 
	/// </summary>
	[ApiController]
	public class WarehouseManagementApiController : ControllerBase {

		private readonly IMapper _mapper;
		private readonly IWarehouseLogic _warehouseLogic; 

		public WarehouseManagementApiController(IMapper mapper, IWarehouseLogic warehouseLogic) { 
			_mapper = mapper; 
			_warehouseLogic = warehouseLogic;
		}
		
		/// <summary>
		/// Exports the hierarchy of Warehouse and Truck objects. 
		/// </summary>
		/// <response code="200">Successful response</response>
		/// <response code="400">The operation failed due to an error.</response>
		/// <response code="404">No hierarchy loaded yet.</response>
		[HttpGet]
		[Route("/warehouse")]
		[ValidateModelState]
		[SwaggerOperation("ExportWarehouses")]
		[SwaggerResponse(statusCode: 200, type: typeof(Warehouse), description: "Successful response")]
		[SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
		public virtual IActionResult ExportWarehouses() {
			var result = _warehouseLogic.ExportWarehouses();

			if(result is BusinessLogic.Entities.Warehouse){
				return StatusCode(StatusCodes.Status200OK, new ObjectResult(_mapper.Map<DTOs.Warehouse>(result)).Value); 
			}

			var error = _mapper.Map<DTOs.Error>(result); 
            return StatusCode((int)error.StatusCode, error);
		}

		/// <summary>
		/// Get a certain warehouse or truck by code
		/// </summary>
		/// <param name="code"></param>
		/// <response code="200">Successful response</response>
		/// <response code="400">The operation failed due to an error.</response>
		/// <response code="404">No hop with the specified id could be found.</response>
		[HttpGet]
		[Route("/warehouse/{code}")]
		[ValidateModelState]
		[SwaggerOperation("GetWarehouse")]
		[SwaggerResponse(statusCode: 200, type: typeof(Hop), description: "Successful response")]
		[SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
		public virtual IActionResult GetWarehouse([FromRoute(Name = "code")] [Required] string code) {
			var result = _warehouseLogic.GetWarehouse(code);

			if(result is BusinessLogic.Entities.Hop){
				return StatusCode(StatusCodes.Status200OK, new ObjectResult(_mapper.Map<DTOs.Hop>(result)).Value); 
			}

			var error = _mapper.Map<DTOs.Error>(result); 
            return StatusCode((int)error.StatusCode, error);
		}

		/// <summary>
		/// Imports a hierarchy of Warehouse and Truck objects. 
		/// </summary>
		/// <param name="warehouse"></param>
		/// <response code="200">Successfully loaded.</response>
		/// <response code="400">The operation failed due to an error.</response>
		[HttpPost]
		[Route("/warehouse")]
		[Consumes("application/json")]
		[ValidateModelState]
		[SwaggerOperation("ImportWarehouses")]
		[SwaggerResponse(statusCode: 400, type: typeof(Error), description: "The operation failed due to an error.")]
		public virtual IActionResult ImportWarehouses([FromBody] Warehouse warehouse) {
			var warehouseEntity = _mapper.Map<BusinessLogic.Entities.Warehouse>(warehouse);
			var result = _warehouseLogic.ImportWarehouses(warehouseEntity);

			if(result is BusinessLogic.Entities.Error){
				var error = _mapper.Map<DTOs.Error>(result); 
            	return StatusCode((int)error.StatusCode, error);
			}
			return StatusCode(StatusCodes.Status200OK);
		}
	}
}